<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Memory Experiment</title>
    <style>
        canvas {
            padding-left: 0;
            padding-right: 0;
            margin-left: auto;
            margin-right: auto;
            display: block;
        }
    </style>
</head>

<body onload="main()">
<div>
    <canvas id="mainWin" width="600" height="700" style="border:1px solid #000000;"></canvas>
</div>

<script src="server.js"></script>
<script src="trivia.js"></script>

<script>

    var canvas = document.getElementById("mainWin");
    var _version = "JS Experiment app";
    var ctx = canvas.getContext("2d");
    var requestId = 0;
    var session_start;
    var config_parsed=false;

    var state = 'init';
    var preload_state = 'init';
    var demo_mode = false;

    var sessionToken = '';
    var cfg = {};
    var response_log = [];
    var trial_number = 0;
    var last_response='';
    var last_response_time=window.performance.now();
    var images=[];

    var layout = {
        width: 600,
        height: 700,
        clear: function() {
            ctx.clearRect(0,0, this.width, this.height);
        }
    };

    var memory_test = {
        targets: [],
        foils: [],
        stimList: [],
        testLength: 0,
        make_test: function() {
            var items=[];
            for(var i=0;i<this.targets.length;i++) items.push([this.targets[i],1]);
            for(i=0;i<this.foils.length;i++) items.push([this.foils[i],0]);
            this.stimList=shuffle(items);
            // check for too many of same type in a row?
            this.testLength=this.stimList.length;
        },
        get_stim: function(n) {
            if(n<this.testLength) return this.stimList[n][0];
            return('error');
        },
        stim_type: function(n){
            if(n<this.testLength) return this.stimList[n][1];
            return(-1);
        }
    };

    function message(lines) {
        ctx.font = "24px Arial";
        ctx.fillStyle='black';
        ctx.textAlign="center";
        for (var i=0; i<lines.length; i++) {
            ctx.fillText(lines[i], layout.width/2, 100+(i*28));
        }
    }

    function show_word(word) {
        ctx.font = "40px Arial";
        ctx.fillStyle='black';
        ctx.textAlign="center";
        ctx.fillText(word, layout.width/2, 350);
    }

    function show_picture(image_name) {
        // show the next picture
        // console.log("Showing image "+image_name);
        var x = layout.width/2.0 - images[image_name].width/2.0;
        var y = (layout.height/2.0 - images[image_name].height/2.0)+50;
        ctx.drawImage(images[image_name],x,y);
    }

    function draw() {
        // main experiment frame refresh loop based on state variable
        layout.clear();
        if (state=='init') {
            // instructions
            message(['Welcome to the 205 Sring 2016 ','Short Class Experiment',
                    'Thanks for volunteering to help out',
                    'This experiment will take about 5 minutes',
                    'Your participation is entirely voluntary',
                    'and you are free to stop at any time',
                    'Press Enter to begin']);
        } else if (state=='study' || state=='study_feedback') {
            // show stimuli, collect study ratings
            if (cfg['studyCondition'] == 'deep') {
                // print deep encoding instructions
                if (cfg['stimCondition'] == 'words') {
                    message(['Rate how much you like the word',
                        'On a scale from 1 to 5',
                        'Where 5 means you like the word',
                        'And 1 means you dislike the word']);
                    //show_word(cfg['wordList'][trial_number]);
                } else {
                    message(['Rate how much you like the object in the picture',
                        'On a scale from 1 to 5',
                        'Where 5 means you like the word',
                        'And 5 means you dislike the word']);
                    //show_picture();
                }

            } else {
                // print shallow encoding instructions
                if (cfg['stimCondition'] == 'words') {
                    message(['Count the number of vowels in the word',
                        'Press that number on the keyboard']);
                } else {
                    // Present the 5 color options
                    message(['Indicate the most prominent color in the image (1-5)', '1 = White, 2 = Gray or Beige, 3 = Blue or Green',
                        '4 = Orange or Red, 5 = Black or Brown']);
                }
            }
            if (state=='study_feedback') {
                console.log("Feedback for trial " + (trial_number - 1));
                if (cfg['stimCondition'] == 'words') show_word(cfg['wordList'][trial_number - 1]);
                else show_picture(cfg['imageList'][trial_number-1]);
                ctx.font = "24px Arial";
                ctx.fillStyle = 'black';
                ctx.textAlign = "center";
                ctx.fillText(last_response, layout.width / 2, 650);
                var elap = (window.performance.now() - last_response_time) / 1000.0;
                if (elap > cfg['feedback_time']) state = 'study';
            } else {
                if (cfg['stimCondition'] == 'words') show_word(cfg['wordList'][trial_number]);
                else show_picture(cfg['imageList'][trial_number]);
            }
        } else if (state=='delay') {
            // impose experimental delay between study and test
            message(['Switching tasks...']);
            requestId = window.requestAnimationFrame(start_trivia);
            //start_trivia();
            //window.cancelAnimationFrame(requestId);
            return;
        } else if (state=='delay_return') {
            message(['Lets test your memory for the items you saw earlier',
            'In this part you will see some old items',
            'And some new ones.',
            'For each one press 1 if you think you saw it',
            'And 2 if you think it is new',
            'Press Enter to begin']);
        } else if (state=='test') {
            // give memory test
            message(['Memory test','Press 1 if you saw this in the first part','Press 2 if you did not see it before']);
            if (cfg['stimCondition'] == 'words') show_word(memory_test.get_stim(trial_number));
            else show_picture(memory_test.get_stim(trial_number));
        } else if (state=='done'){
            // thank you message, upload data, terminate gracefully
            message(['Thanks for participating in our experiment','','Our experiment was a test of memory',
            'Some people saw words and some saw pictures',
            'Some people rated how much they liked', 'the word or picture while others',
                'made a surface judgement about color','or number of vowels.',
            'We hypothesized that rating liking','would lead to better memory',
            'and that the pictures would be','remembered better than words.',
            'You can ask about the results with','the person who referred you here',
            'when we are finished with our class study.']);
            end_session();
            window.cancelAnimationFrame(requestId);
            return;
        }
        requestId = window.requestAnimationFrame(draw);
    }

    function return_main() {
        window.cancelAnimationFrame(requestId);
        state='delay_return';
        requestId = window.requestAnimationFrame(draw);
    }

    // input functions
    function keypress(e) {
        var k = String.fromCharCode(e.keyCode);

        // study, delay and test responses different
        if (state=='init') {
            // press Enter to continue, change state
            if (e.keyCode==13) {
                state='study';
                //state='delay';
            }
        } else if (state=='study') {
            // numbers
            if (k=='1' || k=='2' || k=='3' || k=='4' || k=='5') {
                // to do: display response to participant, set state to 'study_feedback' that lasts for set time
                if(cfg['stimCondition']=='words') log_event('study',[trial_number, cfg['wordList'][trial_number], k]);
                else log_event('study',[trial_number, cfg['imageList'][trial_number], k]);
                // check for ende of study phase to change state
                trial_number++;
                if (trial_number>=cfg['study_trials']) {
                    state='delay';
                } else {
                    last_response='Your response '+k;
                    last_response_time=window.performance.now();
                    state='study_feedback';
                    //console.log("Feedback for trial "+(trial_number-1));
                }
            }
        } else if (state=='delay') {
            // waiting, then key
            if (e.keyCode==27) {
                state='delay_return';
                trial_number=0;
            }
        } else if (state=='delay_return') {
            if (e.keyCode==13) {
                state = 'test';
                trial_number = 0;
            }
        } else if (state=='test') {
            // 1 or 2
            if (k=='1' || k=='2') {
                log_event('test', [trial_number, memory_test.get_stim(trial_number), memory_test.stim_type(trial_number), k]);
                console.log([trial_number, memory_test.get_stim(trial_number), memory_test.stim_type(trial_number), k]);
                trial_number++;
                // check for end of study phase to change state
                if (trial_number >= memory_test.testLength) {
                    state = 'done';
                }
            }
        } else {
            // Done, so no actions
        }
    }

    //function mouseclick(e) {
        // study, delay and test responses different

    //}

     function log_event(event_type,args) { // args[0] is generally trial_num for event, others vary
         // general output file format:
         // timestamp trial_number event_type args[1:]
         var elap = (window.performance.now() - session_start)/1000.0; // time stamp
         var line = elap.toFixed(2)+"\t"+args[0]+"\t"+event_type+"\t";
         for(var i=1;i<args.length;i++) line+="\t"+args[i].toString();
         response_log.push(line);
    }

    // server functions
    function warn_termination() {
        // data and status upload
        // send_status() here if appropriate
        ServerHelper.upload_data('partial',response_log);
        return "Session not completed yet."
    }

     // partial uploads at breaks
    function end_session() {
        window.onbeforeunload = null;
        // send_status() here if needed
        // ServerHelper.upload_data('complete',response_log);
    }

    function terminate(msg){
        window.onbeforeunload = null;
        // alert error, quit
        alert("Error: "+msg+". Please contact Experimenter.");
        window.cancelAnimationFrame(requestId);
    }

    function shuffle(array) {
      var currentIndex = array.length, temporaryValue, randomIndex;

      // While there remain elements to shuffle...
      while (0 !== currentIndex) {

        // Pick a remaining element...
        randomIndex = Math.floor(Math.random() * currentIndex);
        currentIndex -= 1;

        // And swap it with the current element.
        temporaryValue = array[currentIndex];
        array[currentIndex] = array[randomIndex];
        array[randomIndex] = temporaryValue;
      }

      return array;
    }

    function parse_config(config){
        //console.log(config);
        var lines = config.split('\n');
        for (var i=0;i<lines.length;i++) {
            t = lines[i].trim().split(' ');  // cfg file is space separated here
            // skip comments '#' and blank lines
            if (lines[i][0] != '#' && t.length > 0 && t[0].trim() != '') {
                // t[0] is the first keyword on the line, t[1:] are the arguments
                // everything is strings at this point, numbers & colors need to be converted explicitly as needed
                if (t.length==1) cfg[t[0]]=true;
                else if(t.length==2) cfg[t[0]]=t[1];
                else cfg[t[0]]=t.slice(1);
            }
        }
        if (cfg['stimCondition']=='words') {
            cfg['wordList']=shuffle(cfg['words']);
            cfg['study_trials']=cfg['wordList'].length;
            memory_test.targets=cfg['words'];
            memory_test.foils=cfg['foils'];
            memory_test.make_test();
        } else if (cfg['stimCondition']=='images') {
            cfg['imageList']=shuffle(cfg['images']);
            cfg['study_trials']=cfg['imageList'].length;
            memory_test.targets=cfg['images'];
            memory_test.foils=cfg['foils'];
            memory_test.make_test();
            preload_images();
        }
        cfg['feedback_time']=1.0;
    }


    function preload_images(){
        var im = new Image();

        console.log("Loading images...");
        for(var i=0;i<memory_test.testLength; i++) {
            im = new Image();
            im.src = ServerHelper.image_url+"images_for_exp/"+memory_test.stimList[i][0]; //line where image array is populated
            images[memory_test.stimList[i][0]]=im;
        }
        console.log("Loaded");
    }

    // It would be nice if we could store this in a cookie for the browser to allow anonymous restarts...
    function unique_worker_id() {
        return 'No_worker_id_'+Math.random().toString(36).slice(-8);
    }

    // Preload & initialization
    function preload_draw() {
        // preload things, cfg file, etc.
        // get configuration file with list of stimuli, words, pictures

        if (preload_state == 'init') {
            if (cfg.hasOwnProperty('group')) {
                // get session token from group
                if (!ServerHelper.group_session_requested)
                    ServerHelper.group_session_request(cfg['group'], unique_worker_id());
                preload_state = 'group_wait';
            } else if (cfg.hasOwnProperty('session')) {
                sessionToken = cfg['session'];
                ServerHelper.request_config(sessionToken);
                preload_state = 'session_wait';
            } else {
                terminate("Unable to load configuration");
            }
        } else if(preload_state == 'group_wait') {
            if(ServerHelper.group_session_received) {
                if(ServerHelper.sessionToken.slice(0,5)=='Error') {
                    console.log(ServerHelper.sessionToken);
                    terminate("Unable to establish session");
                    return;
                }
                cfg['sessionToken']=ServerHelper.sessionToken;
                //console.log("Got session: "+cfg['sessionToken']);
                sessionToken=cfg['sessionToken'];
                ServerHelper.request_config(cfg['sessionToken']);
                preload_state='session_wait';
            }
        } else if (preload_state == 'session_wait') {
            if (ServerHelper.config_received == true) {
                parse_config(ServerHelper.config_file);
                config_parsed=true;
                preload_state = 'log_config';
            }
        } else if(preload_state=='log_config') {
            if (config_parsed) { // don't continue until ready
                // put config into the response log to start
                response_log.push("Experiment app: " + _version);
                response_log.push("Source URL: " + document.URL);
                response_log.push("Run on " + new Date());
                response_log.push("");
                //console.log("logging config");
                for (key in cfg) {
                    response_log.push(key + ": " + cfg[key]);
                    //console.log(key + ": " + cfg[key]);
                }
                response_log.push("##########");
                preload_state = 'done';
            }
        }
        if (preload_state=='done') {
            // hand off to draw when done
            session_start=window.performance.now();
            trial_number=0;
            requestId = window.requestAnimationFrame(draw);
        } else {
            requestId = window.requestAnimationFrame(preload_draw);
        }
    }

    function main() {
        var url=document.URL;
        var params=parse_url(url); // function in server.js

        for (var p in params) cfg[p]=params[p];
        window.onbeforeunload=warn_termination;
        requestId = window.requestAnimationFrame(preload_draw);
    }

    window.addEventListener("keydown",keypress,false);
    //canvas.addEventListener("click",mouseclick,false);
</script>

</body>
</html>